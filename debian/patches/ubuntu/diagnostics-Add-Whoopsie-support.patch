From: =?utf-8?b?Ik1hcmNvIFRyZXZpc2FuIChUcmV2acOxbyki?= <mail@3v1n0.net>
Date: Sat, 4 Jun 2022 14:57:01 +0200
Subject: diagnostics: Add Whoopsie support

---
 meson.build                                   |   9 ++
 meson_options.txt                             |   1 +
 panels/privacy/cc-diagnostics-page.c          | 224 ++++++++++++++++++++++++++
 panels/privacy/cc-diagnostics-page.ui         |  10 +-
 panels/privacy/gnome-privacy-panel.desktop.in |   2 +-
 panels/privacy/meson.build                    |   4 +
 6 files changed, 248 insertions(+), 2 deletions(-)

diff --git a/meson.build b/meson.build
index 378a1a9..151f237 100644
--- a/meson.build
+++ b/meson.build
@@ -250,6 +250,14 @@ endif
 config_h.set('HAVE_MALCONTENT', enable_malcontent,
              description: 'Define to 1 if malcontent support is enabled')
 
+# Whoopsie (Ubuntu error reporting service)
+enable_whoopsie = get_option('whoopsie')
+if enable_whoopsie
+  whoopsie_dep = dependency('libwhoopsie-preferences')
+endif
+config_h.set('HAVE_WHOOPSIE', enable_whoopsie,
+             description: 'Define to 1 if Whoopsie is enabled')
+
 if host_is_linux
   # ModemManager
   mm_dep =  dependency('mm-glib', version: '>= 0.7')
@@ -350,4 +358,5 @@ summary({
   'IBus': enable_ibus,
   'Snap': enable_snap,
   'Malcontent': enable_malcontent,
+  'Whoopsie': enable_whoopsie,
 }, section: 'Optional Dependencies')
diff --git a/meson_options.txt b/meson_options.txt
index 8ee7b6e..beebcf2 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -8,3 +8,4 @@ option('profile', type: 'combo', choices: ['default','development'], value: 'def
 option('malcontent', type: 'boolean', value: false, description: 'build with malcontent support')
 option('distributor_logo', type: 'string', description: 'absolute path to distributor logo for the About panel')
 option('dark_mode_distributor_logo', type: 'string', description: 'absolute path to distributor logo dark mode variant')
+option('whoopsie', type: 'boolean', value: false, description: 'build with Whoopsie support')
diff --git a/panels/privacy/cc-diagnostics-page.c b/panels/privacy/cc-diagnostics-page.c
index 814d2ca..05c9410 100644
--- a/panels/privacy/cc-diagnostics-page.c
+++ b/panels/privacy/cc-diagnostics-page.c
@@ -18,6 +18,8 @@
  * Author: Matthias Clasen <mclasen@redhat.com>
  */
 
+#include <config.h>
+
 #include "cc-diagnostics-page.h"
 #include "cc-util.h"
 #include "shell/cc-application.h"
@@ -25,6 +27,10 @@
 #include <gio/gdesktopappinfo.h>
 #include <glib/gi18n.h>
 
+#ifdef HAVE_WHOOPSIE
+#include <whoopsie-preferences/libwhoopsie-preferences.h>
+#endif
+
 struct _CcDiagnosticsPage
 {
   AdwNavigationPage    parent_instance;
@@ -33,6 +39,13 @@ struct _CcDiagnosticsPage
   GtkSwitch           *abrt_switch;
 
   GSettings           *privacy_settings;
+
+#ifdef HAVE_WHOOPSIE
+  AdwActionRow        *abrt_row;
+  AdwComboRow         *whoopsie_combo_row;
+  WhoopsiePreferences *whoopsie;
+  GCancellable        *cancellable;
+#endif
 };
 
 G_DEFINE_TYPE (CcDiagnosticsPage, cc_diagnostics_page, ADW_TYPE_NAVIGATION_PAGE)
@@ -59,9 +72,191 @@ abrt_vanished_cb (GDBusConnection *connection,
   CcDiagnosticsPage *self = CC_DIAGNOSTICS_PAGE (user_data);
 
   g_debug ("ABRT vanished");
+#ifndef HAVE_WHOOPSIE
   gtk_widget_set_visible (GTK_WIDGET (self), FALSE);
+#endif
 }
 
+#ifdef HAVE_WHOOPSIE
+typedef enum
+{
+  WHOOPSIE_BUTTON_SETTING_NEVER,
+  WHOOPSIE_BUTTON_SETTING_AUTO,
+  WHOOPSIE_BUTTON_SETTING_MANUAL,
+} WhoopsieButtonSettingType;
+
+static void
+whoopsie_set_report_crashes_done (GObject *source_object,
+                                  GAsyncResult *res,
+                                  gpointer user_data)
+{
+  CcDiagnosticsPage *self = CC_DIAGNOSTICS_PAGE (user_data);
+  g_autoptr(GError) error = NULL;
+
+  if (!whoopsie_preferences_call_set_report_crashes_finish (self->whoopsie, res, &error))
+    {
+      if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        return;
+
+      g_warning ("Failed to toggle crash reporting: %s", error->message);
+    }
+}
+
+static void
+whoopsie_set_report_crashes_mode_done (GObject *source_object,
+                                       GAsyncResult *res,
+                                       gpointer user_data)
+{
+  CcDiagnosticsPage *self = CC_DIAGNOSTICS_PAGE (user_data);
+  g_autoptr(GError) error = NULL;
+
+  if (!whoopsie_preferences_call_set_automatically_report_crashes_finish (self->whoopsie, res, &error))
+    {
+      if (g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        return;
+
+      g_warning ("Failed to toggle crash reporting mode: %s", error->message);
+    }
+}
+
+static void
+whoopsie_combo_row_changed_cb (CcDiagnosticsPage *self)
+{
+  g_autoptr (GObject) item = NULL;
+  GListModel *model;
+  gint selected_index;
+  gint value;
+
+  model = adw_combo_row_get_model (self->whoopsie_combo_row);
+  selected_index = adw_combo_row_get_selected (self->whoopsie_combo_row);
+  if (selected_index == -1)
+    return;
+
+  item = g_list_model_get_item (model, selected_index);
+  value = GPOINTER_TO_UINT (g_object_get_data (G_OBJECT (item), "value"));
+
+  whoopsie_preferences_call_set_report_crashes (self->whoopsie,
+                                                value != WHOOPSIE_BUTTON_SETTING_NEVER,
+                                                self->cancellable,
+                                                whoopsie_set_report_crashes_done,
+                                                self);
+
+  whoopsie_preferences_call_set_automatically_report_crashes (self->whoopsie,
+                                                              value == WHOOPSIE_BUTTON_SETTING_AUTO,
+                                                              self->cancellable,
+                                                              whoopsie_set_report_crashes_mode_done,
+                                                              self);
+}
+
+static void
+set_value_for_combo_row (AdwComboRow *combo_row, gint value)
+{
+  g_autoptr (GObject) new_item = NULL;
+  GListModel *model;
+  guint i;
+
+  /* try to make the UI match the setting */
+  model = adw_combo_row_get_model (combo_row);
+  for (i = 0; i < g_list_model_get_n_items (model); i++)
+    {
+      g_autoptr (GObject) item = g_list_model_get_item (model, i);
+      gint value_tmp = GPOINTER_TO_UINT (g_object_get_data (item, "value"));
+      if (value_tmp == value)
+        {
+          adw_combo_row_set_selected (combo_row, i);
+          return;
+        }
+    }
+}
+
+static void
+whoopsie_properties_changed (CcDiagnosticsPage *self)
+{
+  WhoopsieButtonSettingType value = WHOOPSIE_BUTTON_SETTING_NEVER;
+
+  if (whoopsie_preferences_get_automatically_report_crashes (self->whoopsie))
+    value = WHOOPSIE_BUTTON_SETTING_AUTO;
+  else if (whoopsie_preferences_get_report_crashes (self->whoopsie))
+    value = WHOOPSIE_BUTTON_SETTING_MANUAL;
+
+  g_signal_handlers_block_by_func (self->whoopsie_combo_row, whoopsie_combo_row_changed_cb, self);
+  set_value_for_combo_row (self->whoopsie_combo_row, value);
+  g_signal_handlers_unblock_by_func (self->whoopsie_combo_row, whoopsie_combo_row_changed_cb, self);
+}
+
+static void
+populate_whoopsie_button_row (AdwComboRow *combo_row)
+{
+  g_autoptr (GtkStringList) string_list = NULL;
+  struct {
+    char *name;
+    WhoopsieButtonSettingType value;
+  } actions[] = {
+    { NC_("Whoopsie error reporting", "Never"), WHOOPSIE_BUTTON_SETTING_NEVER },
+    { NC_("Whoopsie error reporting", "Automatic"), WHOOPSIE_BUTTON_SETTING_AUTO },
+    { NC_("Whoopsie error reporting", "Manual"), WHOOPSIE_BUTTON_SETTING_MANUAL },
+  };
+  guint item_index = 0;
+  guint i;
+
+  string_list = gtk_string_list_new (NULL);
+  for (i = 0; i < G_N_ELEMENTS (actions); i++)
+    {
+      g_autoptr (GObject) item = NULL;
+
+      gtk_string_list_append (string_list, _(actions[i].name));
+
+      item = g_list_model_get_item (G_LIST_MODEL (string_list), item_index++);
+      g_object_set_data (item, "value", GUINT_TO_POINTER (actions[i].value));
+    }
+
+  adw_combo_row_set_model (combo_row, G_LIST_MODEL (string_list));
+}
+
+static void
+on_new_whoopsie_proxy_cb (GObject *object,
+                          GAsyncResult *res,
+                          gpointer data)
+{
+  CcDiagnosticsPage *self = CC_DIAGNOSTICS_PAGE (data);
+  g_autoptr(GError) error = NULL;
+
+  self->whoopsie = whoopsie_preferences_proxy_new_for_bus_finish (res, &error);
+
+  if (error)
+    {
+      if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
+        g_warning ("Failed to get whoopsie proxy: %s", error->message);
+
+      gtk_widget_set_visible (GTK_WIDGET (self->whoopsie_combo_row), FALSE);
+      gtk_widget_set_visible (GTK_WIDGET (self->abrt_row), TRUE);
+      return;
+    }
+
+  g_debug ("Whoopsie available");
+  gtk_widget_set_visible (GTK_WIDGET (self), TRUE);
+  gtk_widget_set_visible (GTK_WIDGET (self->whoopsie_combo_row), TRUE);
+  gtk_widget_set_sensitive (GTK_WIDGET (self->whoopsie_combo_row), TRUE);
+
+
+  g_signal_handlers_block_by_func (self->whoopsie_combo_row,
+                                   whoopsie_combo_row_changed_cb, self);
+  populate_whoopsie_button_row (self->whoopsie_combo_row);
+  g_signal_handlers_unblock_by_func (self->whoopsie_combo_row,
+                                     whoopsie_combo_row_changed_cb, self);
+
+  g_signal_connect_object (self->whoopsie, "g-properties-changed",
+                           G_CALLBACK (whoopsie_properties_changed),
+                           self, G_CONNECT_SWAPPED);
+
+  whoopsie_properties_changed (self);
+}
+#else
+static void
+whoopsie_combo_row_changed_cb (CcDiagnosticsPage *self)
+{}
+#endif
+
 static void
 cc_diagnostics_page_finalize (GObject *object)
 {
@@ -70,6 +265,12 @@ cc_diagnostics_page_finalize (GObject *object)
   g_clear_object (&self->privacy_settings);
 
   G_OBJECT_CLASS (cc_diagnostics_page_parent_class)->finalize (object);
+
+#if HAVE_WHOOPISE
+  g_cancellable_cancel (self->cancellable);
+  g_clear_object (&self->cancellable);
+  g_clear_object (&self->whoopsie);
+#endif
 }
 
 static void
@@ -84,6 +285,12 @@ cc_diagnostics_page_class_init (CcDiagnosticsPageClass *klass)
 
   gtk_widget_class_bind_template_child (widget_class, CcDiagnosticsPage, diagnostics_group);
   gtk_widget_class_bind_template_child (widget_class, CcDiagnosticsPage, abrt_switch);
+
+#ifdef HAVE_WHOOPSIE
+  gtk_widget_class_bind_template_child (widget_class, CcDiagnosticsPage, abrt_row);
+  gtk_widget_class_bind_template_child (widget_class, CcDiagnosticsPage, whoopsie_combo_row);
+#endif
+  gtk_widget_class_bind_template_callback (widget_class, whoopsie_combo_row_changed_cb);
 }
 
 static void
@@ -112,6 +319,23 @@ cc_diagnostics_page_init (CcDiagnosticsPage *self)
                    self->abrt_switch, "active",
                    G_SETTINGS_BIND_DEFAULT);
 
+#ifdef HAVE_WHOOPSIE
+  /* check for whoopsie */
+  self->cancellable = g_cancellable_new ();
+  whoopsie_preferences_proxy_new_for_bus (G_BUS_TYPE_SYSTEM,
+                                          G_DBUS_PROXY_FLAGS_NONE,
+                                          "com.ubuntu.WhoopsiePreferences",
+                                          "/com/ubuntu/WhoopsiePreferences",
+                                          self->cancellable,
+                                          on_new_whoopsie_proxy_cb,
+                                          self);
+
+  gtk_widget_set_visible (GTK_WIDGET (self), TRUE);
+  gtk_widget_set_visible (GTK_WIDGET (self->whoopsie_combo_row), TRUE);
+  gtk_widget_set_visible (GTK_WIDGET (self->abrt_row), FALSE);
+  gtk_widget_set_sensitive (GTK_WIDGET (self->whoopsie_combo_row), FALSE);
+#endif
+
   os_name = g_get_os_info (G_OS_INFO_KEY_NAME);
   if (!os_name)
     os_name = g_strdup ("GNOME");
diff --git a/panels/privacy/cc-diagnostics-page.ui b/panels/privacy/cc-diagnostics-page.ui
index 1dee196..b21d157 100644
--- a/panels/privacy/cc-diagnostics-page.ui
+++ b/panels/privacy/cc-diagnostics-page.ui
@@ -14,7 +14,7 @@
               <object class="AdwPreferencesGroup" id="diagnostics_group">
                 <property name="title" translatable="yes">Problem Reporting</property>
                 <child>
-                  <object class="AdwActionRow">
+                  <object class="AdwActionRow" id="abrt_row">
                     <property name="title" translatable="yes">_Automatic Problem Reporting</property>
                     <property name="use-underline">True</property>
                     <property name="activatable-widget">abrt_switch</property>
@@ -25,6 +25,14 @@
                     </child>
                   </object>
                 </child>
+                <child>
+                  <object class="AdwComboRow" id="whoopsie_combo_row">
+                    <property name="visible">False</property>
+                    <property name="title" translatable="yes">Send error reports to Canonical</property>
+                    <property name="use_underline">True</property>
+                    <signal name="notify::selected-item" handler="whoopsie_combo_row_changed_cb" object="CcDiagnosticsPage" swapped="yes"/>
+                  </object>
+                </child>
               </object>
             </child>
           </object>
diff --git a/panels/privacy/gnome-privacy-panel.desktop.in b/panels/privacy/gnome-privacy-panel.desktop.in
index beaf33d..bdfa355 100644
--- a/panels/privacy/gnome-privacy-panel.desktop.in
+++ b/panels/privacy/gnome-privacy-panel.desktop.in
@@ -11,4 +11,4 @@ StartupNotify=true
 Categories=GNOME;GTK;Settings;DesktopSettings;X-GNOME-Settings-Panel;X-GNOME-AccountSettings;
 OnlyShowIn=GNOME;
 # Translators: Search terms to find the Privacy panel. Do NOT translate or localize the semicolons! The list MUST also end with a semicolon!
-Keywords=Privacy;Screen;Lock;Private;Usage;Recent;History;Files;Temporary;Tmp;Trash;Purge;Retain;Diagnostics;Crash;Location;Gps;Camera;Photos;Video;Webcam;Microphone;Recording;Security;Firmware;Thunderbolt;Network;
+Keywords=Privacy;Screen;Lock;Private;Usage;Recent;History;Files;Temporary;Tmp;Trash;Purge;Retain;Diagnostics;Crash;Location;Gps;Camera;Photos;Video;Webcam;Microphone;Recording;Security;Firmware;Thunderbolt;Network;error;bug;whoopsie;launchpad;issue;
diff --git a/panels/privacy/meson.build b/panels/privacy/meson.build
index c5ed21a..7c6b711 100644
--- a/panels/privacy/meson.build
+++ b/panels/privacy/meson.build
@@ -87,6 +87,10 @@ if host_is_linux
   deps += network_manager_deps
 endif
 
+if enable_whoopsie
+  deps += whoopsie_dep
+endif
+
 panels_libs += static_library(
   cappletname,
   sources: sources,
